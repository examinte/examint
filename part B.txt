Public class StaffMember
{
 Public string Name { get; set; }
 Public int Age { get; set; }
 Public decimal Salary { get; set; }
 Public StaffMember(string name, int age, decimal salary)
 {
 Name = name;
 Age = age;
 Salary = salary;
 }
 Public virtual void DisplayDetails()
 {
 Console.WriteLine($”Name: {Name}”);
 Console.WriteLine($”Age: {Age}”);
 Console.WriteLine($”Salary: ${Salary:F2}”);
 }
}
Public class Teacher : StaffMember
{
 Public string Subject { get; set; }
 Public Teacher(string name, int age, decimal salary, string subject) : base(name, age, salary)
 {
 Subject = subject;
 }
 Public override void DisplayDetails()
 {
 Base.DisplayDetails();
 Console.WriteLine($”Subject: {Subject}”);
 }
}
Public class AdministrativeStaff : StaffMember
{
 Public string Department { get; set; }
 Public AdministrativeStaff(string name, int age, decimal salary, string department) : base(name, age, salary)
 {
 Department = department;
 }
 Public override void DisplayDetails()
 {
 Base.DisplayDetails();
 Console.WriteLine($”Department: {Department}”);
 }
}
Public class StaffManagementSystem
{
 Public static void Main(string[] args)
 {
 List<StaffMember> staffList = new List<StaffMember>();
 
 staffList.Add(new Teacher(“John Doe”, 40, 50000, “Math”));
 staffList.Add(new Teacher(“Jane Smith”, 35, 45000, “English”));
 
 staffList.Add(new AdministrativeStaff(“Mike Brown”, 42, 35000, “Finance”));
 staffList.Add(new AdministrativeStaff(“Alice Lee”, 38, 38000, “Admissions”));

 Console.WriteLine(“**Staff Details**”);
 Foreach (StaffMember staff in staffList)
 {
 Staff.DisplayDetails();
 Console.WriteLine();
 }

 Decimal totalSalary = staffList.Sum(staff => staff.Salary);
 Console.WriteLine($”Total Salary Expenditure: ${totalSalary:F2}”);
 }
}




2.........
using System;

 public class BankAccount
 {
 public string AccountNumber { get; set; }
 public decimal Balance { get; private set; }
 public string OwnerName { get; set; }

 public BankAccount(string accountNumber, decimal balance, string ownerName)
 {
 AccountNumber = accountNumber;
 Balance = ValidateBalance(balance);
 OwnerName = ownerName;
 }

 private decimal ValidateBalance(decimal balance)
 {
 if (balance < 0)

 {
 throw new ArgumentOutOfRangeException(nameof(balance), "Balance cannot be negative");
 }
 return balance;
 }

 public virtual void Deposit(decimal amount)
 {
 Balance += ValidateAmount(amount);
 }

 public virtual void Withdraw(decimal amount)
 {
 Balance -= ValidateAmount(amount);
}

 protected decimal ValidateAmount(decimal amount)
 {
 if (amount <= 0)
 {
 throw new ArgumentOutOfRangeException(nameof(amount), "Amount must be positive");
 }
 return amount;
 }

 public virtual void DisplayDetails()
 {
 Console.WriteLine($"Account Number: {AccountNumber}");
 Console.WriteLine($"Balance: {Balance:C}");
 Console.WriteLine($"Owner Name: {OwnerName}");
}
 }

 public class SavingsAccount : BankAccount
 {

 public decimal InterestRate { get; set; }

 public SavingsAccount(string accountNumber, decimal balance, string ownerName, decimal interestRate)
 : base(accountNumber, balance, ownerName)
 {
 InterestRate = interestRate;
 }

 public override void DisplayDetails()
 {
 base.DisplayDetails();
 Console.WriteLine($"Interest Rate: {InterestRate:P}");
 }
 }

 public class CheckingAccount : BankAccount
 {
 public decimal OverdraftLimit { get; set; }

 public CheckingAccount(string accountNumber, decimal balance, string ownerName, decimal overdraftLimit)
 : base(accountNumber, balance, ownerName)
 {
 OverdraftLimit = overdraftLimit;
 }

 public override void Withdraw(decimal amount)
 {
 if (Balance - amount < -OverdraftLimit)
 {
 throw new InvalidOperationException("Insufficient funds. Withdrawal exceeds overdraft limit.");
 }
 base.Withdraw(amount);
 }

 public override void DisplayDetails()

 {
 base.DisplayDetails();
 Console.WriteLine($"Overdraft Limit: {OverdraftLimit:C}");
 }
 }

 public class BankSystem
 {
 private List<BankAccount> accounts = new List<BankAccount>();

 public void CreateSavingsAccount(string accountNumber, decimal balance, string ownerName, decimal interestRate)
 {
 accounts.Add(new SavingsAccount(accountNumber, balance, ownerName, interestRate));
 }

 public void CreateCheckingAccount(string accountNumber, decimal balance, string ownerName, decimal overdraftLimit)
 {
 accounts.Add(new CheckingAccount(accountNumber, balance, ownerName, overdraftLimit));
 }

 public decimal GetTotalBalance()
 {
 return accounts.Sum(account => account.Balance);
 }

 public void DisplayAllAccounts()
 {
 foreach (var account in accounts)
 {
 account.DisplayDetails();
 Console.WriteLine("--------------------");
 }
 }
 }

 public class Program
 {
 public static void Main(string[] args)
 {
 BankSystem bank = new BankSystem();

 bank.CreateSavingsAccount("SAV1234", 1000, "John Doe", 0.02m);
 bank.CreateCheckingAccount("CHK5678", 500, "Jane Smith", 200);

 bank.DisplayAllAccounts();

 Console.WriteLine("Total Balance: {0:C}", bank.GetTotalBalance());
 }
}

3..........
public class Product
 {
 public string Name { get; set; }
 public double Price { get; set; }
 public int Quantity { get; set; }

 public Product(string name, double price, int quantity)
 {
 Name = name;
 Price = price;
 Quantity = quantity;
 }

 public virtual string GetDetails() // Virtual method for specific details in derived classes
 {
 return $"Name: {Name}, Price: ${Price}, Quantity: {Quantity}";
 }

 }

 public class Electronics : Product
 {
 public string Brand { get; set; }

 public Electronics(string name, double price, int quantity, string brand) : base(name, price, quantity)
 {
 Brand = brand;
 }

 public override string GetDetails()
 {
 return base.GetDetails() + $", Brand: {Brand}";
 }
 }

 public class Clothing : Product
 {
 public string Size { get; set; }

 public Clothing(string name, double price, int quantity, string size) : base(name, price, quantity)
 {
 Size = size;
 }

 public override string GetDetails()
 {
 return base.GetDetails() + $", Size: {Size}";
 }
 }


 public class Book : Product
 {
 public string Author { get; set; }

 public Book(string name, double price, int quantity, string author) : base(name, price, quantity)
 {
 Author = author;
 }

public override string GetDetails()
 {
 return base.GetDetails() + $", Author: {Author}";
 }
 }

 public class ShoppingCart
 {
 private List<Product> items = new List<Product>();

 public void AddProduct(Product product)
 {
 items.Add(product);
 }

 public List<string> GetCartDetails()
 {
 List<string> details = new List<string>();
 foreach (Product item in items)
{
 details.Add(item.GetDetails());
 }
 return details;
 }


 public double GetTotalCost()
 {
 double totalCost = 0;
 foreach (Product item in items)
 {
 totalCost += item.Price * item.Quantity;
 }
 return totalCost;
 }
 }

 public class Program
 {
public static void Main(string[] args)
 {
 Electronics tv = new Electronics("TV", 500.00, 1, "Samsung");
 Clothing shirt = new Clothing("Shirt", 20.00, 2, "Medium");
 Book book = new Book("The Hitchhiker's Guide to the Galaxy", 10.00, 1, "Douglas Adams");

 ShoppingCart cart = new ShoppingCart();
 cart.AddProduct(tv);
 cart.AddProduct(shirt);
 cart.AddProduct(book);

 Console.WriteLine("Shopping Cart Items:");
 foreach (string detail in cart.GetCartDetails())
 {
 Console.WriteLine(detail);
 }

 Console.WriteLine($"Total Cost: ${cart.GetTotalCost():F2}");
 }
}





4...........
public class Animal
 {
 public string Name { get; set; }
 public int Age { get; set; }
 public string Gender { get; set; }

 public Animal(string name, int age, string gender)
 {
 Name = name;
 Age = age;
 Gender = gender;
 }

 public virtual string MakeSound()
 {
 return "Generic animal sound";
 }

 public override string ToString()
 {
 return $"Name: {Name}, Age: {Age}, Gender: {Gender}";
 }
 }

 public class Mammal : Animal
 {

 public string FurColor { get; set; }

 public Mammal(string name, int age, string gender, string furColor) : base(name, age, gender)
 {
 FurColor = furColor;
 }

 public override string MakeSound()
 {
 return "Mammal sound";
 }

 public void Walk()
 {
 Console.WriteLine($"{Name} is walking.");
 }
 }

 public class Bird : Animal
 {
 public string Habitat { get; set; }
 public bool CanFly { get; set; }

 public Bird(string name, int age, string gender, string habitat, bool canFly) : base(name, age, gender)
 {
 Habitat = habitat;
 CanFly = canFly;
 }

 public override string MakeSound()
 {
 return "Bird sound";
 }
 public void Fly()
 {
 if (CanFly)
 {
 Console.WriteLine($"{Name} is flying.");
 }
 else
 {
 Console.WriteLine($"{Name} cannot fly.");
 }
 }
 }

 public class Reptile : Animal
 {
 public bool IsColdBlooded { get; set; }

 public Reptile(string name, int age, string gender, bool isColdBlooded) : base(name, age, gender)
 {
 IsColdBlooded = isColdBlooded;
 }

 public override string MakeSound()
 {
 return "Reptile sound";
 }

 public void Swim()
 {
 Console.WriteLine($"{Name} is swimming.");
 }
 }

 public class Program

 {
 public static void Main(string[] args)
 {

 Lion lion = new Lion("Leo", 5, "Male", "Golden");
 Parrot parrot = new Parrot("Polly", 2, "Female", "Jungle", true);
 Snake snake = new Snake("Slither", 3, "Unknown", true);

 Console.WriteLine(lion);
 Console.WriteLine($"Fur Color: {lion.FurColor}");
 Console.WriteLine(parrot);
 Console.WriteLine($"Habitat: {parrot.Habitat}, Can Fly: {parrot.CanFly}");
 Console.WriteLine(snake);
 Console.WriteLine($"Cold Blooded: {snake.IsColdBlooded}");

 lion.Walk();
 parrot.Fly();
 snake.Swim();

 Console.WriteLine(lion.MakeSound());
 Console.WriteLine(parrot.MakeSound());
 Console.WriteLine(snake.MakeSound());
 }
 }
 public class Lion : Mammal
 {
 public Lion(string name, int age, string gender, string furColor) : base(name, age, gender, furColor)
 {
 }
 public override string MakeSound()
 {
 return "Roar";
 }
 }




5..........
Public abstract class Course
{
 Public string CourseCode { get; set; }
 Public string Title { get; set; }
 Public string Instructor { get; set; }
 Public List<Student> EnrolledStudents { get; private set; }
 Public Course(string courseCode, string title, string instructor)
 {
 CourseCode = courseCode;
 Title = title;
 Instructor = instructor;
 EnrolledStudents = new List<Student>();
 }
 Public abstract string GetCourseDescription();
 Public void EnrollStudent(Student student)
 {
 EnrolledStudents.Add(student);
 }
 Public override string ToString()
 {
 Return $”Course Code: {CourseCode}, Title: {Title}, Instructor: {Instructor}”;
 }

}

Public class Student
{
 Public string Name { get; set; }
 Public string Id { get; set; }
 Public Student(string name, string id)
 {
 Name = name;
 Id = id;
 }
 Public override string ToString()
 {
 Return $”Name: {Name}, ID: {Id}”;
 }
}

Public class ComputerScienceCourse : Course
{
 Public string ProgrammingLanguage { get; set; }
 Public ComputerScienceCourse(string courseCode, string title, string instructor, string programmingLanguage) : 
base(courseCode, title, instructor)
 {
 ProgrammingLanguage = programmingLanguage;
 }
 Public override string GetCourseDescription()
 {
 Return $”This course covers the fundamentals of computer science using {ProgrammingLanguage}.”;
 }
}


Public class MathematicsCourse : Course
{
 Public string MathArea { get; set; }
 Public MathematicsCourse(string courseCode, string title, string instructor, string mathArea) : base(courseCode, title, 
instructor)
 {
 MathArea = mathArea;
 }
 Public override string GetCourseDescription()
 {
 Return $”This course focuses on {MathArea}.”;
 }
}

Public class LiteratureCourse : Course
{
 Public string Genre { get; set; }
 Public LiteratureCourse(string courseCode, string title, string instructor, string genre) : base(courseCode, title, instructor)
 {
 Genre = genre;
 }
 Public override string GetCourseDescription()
 {
 Return $”This course explores {Genre} literature.”;
 }
}
Public class Program
{
 Public static void Main(string[] args)

 {

 ComputerScienceCourse csCourse = new ComputerScienceCourse(“CSC101”, “Introduction to Programming”, “Prof. 
Smith”, “Python”);
 MathematicsCourse mathCourse = new MathematicsCourse(“MAT202”, “Calculus I”, “Prof. Jones”, “Differential Calculus”);
 LiteratureCourse litCourse = new LiteratureCourse(“LIT303”, “British Literature”, “Prof. White”, “Victorian Era”);
 
 csCourse.EnrollStudent(new Student(“Alice”, “12345”));
 csCourse.EnrollStudent(new Student(“Bob”, “54321”));
 mathCourse.EnrollStudent(new Student(“Charlie”, “98765”));

 Console.WriteLine(csCourse);
 Console.WriteLine(csCourse.GetCourseDescription());
 Console.WriteLine(“Enrolled Students:”);
 Foreach (Student student in csCourse.EnrolledStudents)
 {
 Console.WriteLine(student);
 }
 Console.WriteLine(mathCourse);
 Console.WriteLine(mathCourse.GetCourseDescription());
 Console.WriteLine(litCourse);
 Console.WriteLine(litCourse.GetCourseDescription());
 }
}






6...........
Public abstract class Employee
{
 Public string Name { get; set; }

 Public int Id { get; set; }
 Public decimal HourlyRate { get; set; }
 Public Employee(string name, int id, decimal hourlyRate)
 {
 Name = name;
 Id = id;
 HourlyRate = hourlyRate;
 }
 
 Public abstract decimal CalculateWeeklyPay();
 Public override string ToString()
 {
 Return $”Name: {Name}, ID: {Id}”;
 }
}

Public class FullTimeEmployee : Employee
{
 Private decimal WeeklySalary { get; set; }
 Public FullTimeEmployee(string name, int id, decimal hourlyRate, decimal weeklySalary) : base(name, id, hourlyRate)
 {
 WeeklySalary = weeklySalary;
 }
 Public override decimal CalculateWeeklyPay()
 {
 Return WeeklySalary;
 }
}

Public class PartTimeEmployee : Employee
{
 Private int HoursWorked { get; set; }
 Public PartTimeEmployee(string name, int id, decimal hourlyRate, int hoursWorked) : base(name, id, hourlyRate)
 {
 HoursWorked = hoursWorked;
 }
 Public override decimal CalculateWeeklyPay()
 {
 Return HoursWorked * HourlyRate;
 }
}

Public class Contractor : Employee
{
 Private decimal ProjectPay { get; set; }
 Public Contractor(string name, int id, decimal hourlyRate, decimal projectPay) : base(name, id, hourlyRate)
 {
 ProjectPay = projectPay;
 }
 Public override decimal CalculateWeeklyPay()
 {
 Return ProjectPay;
 }
}
Public class Program
{
 Public static void Main(string[] args)
 {
 

 Employee fullTimeEmp = new FullTimeEmployee(“John Doe”, 1234, 25.00m, 1000.00m);
 Employee partTimeEmp = new PartTimeEmployee(“Jane Smith”, 5678, 20.00m, 20);
 Employee contractor = new Contractor(“Mike Jones”, 9012, 30.00m, 500.00m);
 
 List<Employee> employees = new List<Employee>() { fullTimeEmp, partTimeEmp, contractor };
 Foreach (Employee emp in employees)
 {
 Console.WriteLine(emp);
 Console.WriteLine($”Weekly Pay: ${emp.CalculateWeeklyPay():F2}”);
 Console.WriteLine();
 }
 }
}





7..............
public abstract class FoodItem
 {
 public string Name { get; set; }
 public decimal Price { get; set; }
 public string Description { get; set; }

 public FoodItem(string name, decimal price, string description)
 {
 Name = name;
 Price = price;
 Description = description;
 }

 public override string ToString()
 {

 return $"Name: {Name}, Price: ${Price:F2}, Description: {Description}";
 }
 }


public class Appetizer : FoodItem
 {
 public bool IsVegetarian { get; set; }

 public Appetizer(string name, decimal price, string description, bool isVegetarian) : base(name, price, description)
{
 IsVegetarian = isVegetarian;
 }
 }

 public class MainCourse : FoodItem
 {
 public string Protein { get; set; }

 public MainCourse(string name, decimal price, string description, string protein) : base(name, price, description)
 {
 Protein = protein;
 }
}

 public class Dessert : FoodItem
 {
 public bool IsGlutenFree { get; set; }

 public Dessert(string name, decimal price, string description, bool isGlutenFree) : base(name, price, description)
 {
 IsGlutenFree = isGlutenFree;
 }

 }

public class Order
 {
 public List<FoodItem> Items { get; private set; }
 public decimal TaxRate { get; set; }

 public Order(decimal taxRate)
 {
 Items = new List<FoodItem>();
 TaxRate = taxRate;
 }

 public void AddItem(FoodItem item)
 {
 Items.Add(item);
 }

 public decimal GetSubtotal()
 {
 return Items.Sum(item => item.Price);
 }

 public decimal GetTax()
 {
 return GetSubtotal() * TaxRate;
 }

 public decimal GetTotal(decimal tip = 0)
 {
 return GetSubtotal() + GetTax() + tip;
 }

 public void PrintOrder()
 {

Console.WriteLine("Order Details:");
 foreach (FoodItem item in Items)
 {
 Console.WriteLine(item);
 }
 Console.WriteLine($"Subtotal: ${GetSubtotal():F2}");
 Console.WriteLine($"Tax ({TaxRate * 100}%): ${GetTax():F2}");
 Console.WriteLine($"Total: ${GetTotal():F2}");
 }
 }

 public class Program
 {
 public static void Main(string[] args)
 {

 Appetizer hummus = new Appetizer("Hummus", 8.50m, "Classic hummus with pita bread", true);
 MainCourse steak = new MainCourse("New York Strip Steak", 25.00m, "Grilled steak with fries and vegetables", "Beef");
 Dessert brownie = new Dessert("Chocolate Brownie", 6.00m, "Warm brownie with vanilla ice cream", false);

 Order order = new Order(0.07m);
 order.AddItem(hummus);
 order.AddItem(steak);
 order.AddItem(brownie);
 order.PrintOrder();
 }
}




8..................

public interface IPlaylist
{
 string Name { get; set; }
 int NumberOfSongs { get; }
 TimeSpan TotalDuration { get; }

 void AddSong(Song song);
 void RemoveSong(Song song);
 void DisplaySongs();
 }

 public class Song
 {
 public string Title { get; set; }
 public TimeSpan Duration { get; set; }


 public Song(string title, TimeSpan duration)
 {
 Title = title;
 Duration = duration;
 }
 }

 public class RegularPlaylist : IPlaylist
 {
 private List<Song> songs;

 public RegularPlaylist(string name)
 {
 Name = name;
 songs = new List<Song>();
 }

 public string Name { get; set; }

 public int NumberOfSongs => songs.Count;

 public TimeSpan TotalDuration
 {
 get
 {
 TimeSpan totalDuration = TimeSpan.Zero;
 foreach (Song song in songs)
 {
 totalDuration += song.Duration;
 }
 return totalDuration;
 }
 }

 public void AddSong(Song song)
 {
 songs.Add(song);
 }

 public void RemoveSong(Song song)
 {
 songs.Remove(song);
 }

 public void DisplaySongs()
 {
 Console.WriteLine($"Playlist: {Name}");
 if (songs.Count == 0)
 {
 Console.WriteLine("No songs in playlist.");
 }
 else
 {
 int i = 1;
 foreach (Song song in songs)
 {
 Console.WriteLine($"{i++}. {song.Title}");
 }
 }
 }
 }
 public class Program
 {
 public static void Main(string[] args)
 {
 RegularPlaylist myPlaylist = new RegularPlaylist("My Music");
 
 myPlaylist.AddSong(new Song("Song 1", TimeSpan.FromMinutes(3)));
 myPlaylist.AddSong(new Song("Song 2", TimeSpan.FromMinutes(4)));

 myPlaylist.DisplaySongs();
 Console.WriteLine($"Total Duration: {myPlaylist.TotalDuration}");
 }
}




9....................

Public class Package
{
 Public double Weight { get; set; }
 Public Package(double weight)
 {
 Weight = weight;
 }
 Public static Package operator +(Package package1, Package package2)
 {
 Return new Package(package1.Weight + package2.Weight);
 }
 Public static Package operator –(Package package1, Package package2)
 {
 If (package1.Weight < package2.Weight)
 {
 Throw new ArgumentException(“Package 1 weight cannot be less than Package 2 weight for subtraction.”);
 }
 Return new Package(package1.Weight – package2.Weight);
 }
 Public static bool operator >(Package package1, Package package2)
 {
 Return package1.Weight > package2.Weight;
 }
 Public static bool operator <(Package package1, Package package2)
 {
 Return package1.Weight < package2.Weight;
 }
 Public override string ToString()
 {
 Return $”Package Weight: {Weight} kg”;
 }
}
Public class Program
{
 Public static void Main(string[] args)
 {
 Package package1 = new Package(5.0);
 Package package2 = new Package(3.5);
 Package totalPackage = package1 + package2;
 Console.WriteLine(“Total Weight: {0}”, totalPackage);
 Console.WriteLine(“Package 1 heavier: {0}”, package1 > package2);
 Console.WriteLine(“Package 2 heavier: {0}”, package2 < package1);
 Try
 {
 Package difference = package1 – package2;
 Console.WriteLine(“Weight Difference: {0}”, difference);
 }
 Catch (ArgumentException ex)
 {
 Console.WriteLine(ex.Message);

 }
 }
}
 



10................

Public class Car
{
 Public string Make { get; set; }
 Public string Model { get; set; }
 Public double PricePerDay { get; set; }
 Public bool IsAvailable { get; set; }
 Public Car(string make, string model, double pricePerDay, bool isAvailable = true)
 {
 Make = make;
 Model = model;
 PricePerDay = pricePerDay;
 IsAvailable = isAvailable;
 }
 Public static TimeSpan operator +(Car car, TimeSpan duration1)
 {
 Return duration1;
 }
 Public static TimeSpan operator –(Car car, TimeSpan duration1)
 {
 Return duration1;
 }
 Public static bool operator >(Car car1, Car car2)
 {
 Return car1.PricePerDay > car2.PricePerDay;
 }
 Public static bool operator <(Car car1, Car car2)
 {
 Return car1.PricePerDay < car2.PricePerDay;
 }

 Public override string ToString()
 {
 Return $”Car: {Make} {Model} – Price: ${PricePerDay}/day – Available: {IsAvailable}”;
 }
}
Public class Program
{
 Public static void Main(string[] args)
 {
 Car car1 = new Car(“Toyota”, “Camry”, 50.0);
 Car car2 = new Car(“Honda”, “Accord”, 45.5);
 TimeSpan rentalDuration = TimeSpan.FromDays(7);
 Console.WriteLine(“Rental Duration: {0}”, rentalDuration);
 Console.WriteLine(“Car 1 more expensive: {0}”, car1 > car2);
 Console.WriteLine(“Car 2 more expensive: {0}”, car2 < car1);
 }
}
